{"ast":null,"code":"import * as types from '../constants/ActionTypes';\nimport _ from 'lodash';\n\nvar s4 = () => {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\nvar generateID = () => {\n  return s4() + '-' + s4() + '-' + s4() + '-' + s4();\n};\n\nvar data = JSON.parse(localStorage.getItem('tasks'));\nvar initialState = data ? data : [];\n\nvar myReducer = (state = initialState, action) => {\n  var index = _.findIndex(state, task => {\n    return task.id === action.id;\n  });\n\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.ADD_TASK:\n      var newTask = {\n        id: generateID(),\n        name: action.task.name,\n        status: action.task.status === 'true' ? true : false\n      };\n      state.push(newTask);\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    case types.UPDATE_STATUS_TASK:\n      if (index !== -1) {\n        state[index] = { ...state[index],\n          status: !state[index].status\n        };\n        localStorage.setItem('tasks', JSON.stringify(state));\n      }\n\n      return [...state];\n\n    case types.DELETE_ITEM:\n      if (index !== -1) {\n        state.splice(index, 1);\n        localStorage.setItem('tasks', JSON.stringify(state));\n      }\n\n      return [...state];\n\n    default:\n      return state;\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/Users/haquangtrong/Desktop/reacjs-manager-work/src/reducers/tasks.js"],"names":["types","_","s4","Math","floor","random","toString","substring","generateID","data","JSON","parse","localStorage","getItem","initialState","myReducer","state","action","index","findIndex","task","id","type","LIST_ALL","ADD_TASK","newTask","name","status","push","setItem","stringify","UPDATE_STATUS_TASK","DELETE_ITEM","splice"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB;AACA,OAAOC,CAAP,MAAc,QAAd;;AAEA,IAAIC,EAAE,GAAG,MAAM;AACX,SAAOC,IAAI,CAACC,KAAL,CAAW,CAAC,IAAED,IAAI,CAACE,MAAL,EAAH,IAAoB,OAA/B,EAAwCC,QAAxC,CAAiD,EAAjD,EAAqDC,SAArD,CAA+D,CAA/D,CAAP;AACH,CAFD;;AAGA,IAAIC,UAAU,GAAG,MAAM;AACnB,SAAON,EAAE,KAAK,GAAP,GAAaA,EAAE,EAAf,GAAoB,GAApB,GAA0BA,EAAE,EAA5B,GAAiC,GAAjC,GAAuCA,EAAE,EAAhD;AACH,CAFD;;AAIA,IAAIO,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAX;AACA,IAAIC,YAAY,GAAGL,IAAI,GAAGA,IAAH,GAAU,EAAjC;;AAEA,IAAIM,SAAS,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAC9C,MAAIC,KAAK,GAAGjB,CAAC,CAACkB,SAAF,CAAYH,KAAZ,EAAoBI,IAAD,IAAU;AACrC,WAAOA,IAAI,CAACC,EAAL,KAAYJ,MAAM,CAACI,EAA1B;AACH,GAFW,CAAZ;;AAIA,UAAOJ,MAAM,CAACK,IAAd;AACI,SAAKtB,KAAK,CAACuB,QAAX;AACI,aAAOP,KAAP;;AACJ,SAAKhB,KAAK,CAACwB,QAAX;AACI,UAAIC,OAAO,GAAG;AACVJ,QAAAA,EAAE,EAAEb,UAAU,EADJ;AAEVkB,QAAAA,IAAI,EAAET,MAAM,CAACG,IAAP,CAAYM,IAFR;AAGVC,QAAAA,MAAM,EAAEV,MAAM,CAACG,IAAP,CAAYO,MAAZ,KAAuB,MAAvB,GAAgC,IAAhC,GAAuC;AAHrC,OAAd;AAKAX,MAAAA,KAAK,CAACY,IAAN,CAAWH,OAAX;AACAb,MAAAA,YAAY,CAACiB,OAAb,CAAqB,OAArB,EAA8BnB,IAAI,CAACoB,SAAL,CAAed,KAAf,CAA9B;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACJ,SAAKhB,KAAK,CAAC+B,kBAAX;AACI,UAAGb,KAAK,KAAK,CAAC,CAAd,EAAgB;AACZF,QAAAA,KAAK,CAACE,KAAD,CAAL,GAAe,EACX,GAAGF,KAAK,CAACE,KAAD,CADG;AAEXS,UAAAA,MAAM,EAAE,CAACX,KAAK,CAACE,KAAD,CAAL,CAAaS;AAFX,SAAf;AAIAf,QAAAA,YAAY,CAACiB,OAAb,CAAqB,OAArB,EAA8BnB,IAAI,CAACoB,SAAL,CAAed,KAAf,CAA9B;AACH;;AACD,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACJ,SAAKhB,KAAK,CAACgC,WAAX;AACC,UAAGd,KAAK,KAAK,CAAC,CAAd,EAAgB;AACfF,QAAAA,KAAK,CAACiB,MAAN,CAAaf,KAAb,EAAoB,CAApB;AAEAN,QAAAA,YAAY,CAACiB,OAAb,CAAqB,OAArB,EAA8BnB,IAAI,CAACoB,SAAL,CAAed,KAAf,CAA9B;AACA;;AACE,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACJ;AACI,aAAOA,KAAP;AA7BR;AA+BH,CApCD;;AAsCA,eAAeD,SAAf","sourcesContent":["import * as types from '../constants/ActionTypes';\nimport _ from 'lodash';\n\nvar s4 = () => {\n    return Math.floor((1+Math.random()) * 0x10000).toString(16).substring(1);\n}\nvar generateID = () => {\n    return s4() + '-' + s4() + '-' + s4() + '-' + s4(); \n}\n\nvar data = JSON.parse(localStorage.getItem('tasks'));\nvar initialState = data ? data : [];\n\nvar myReducer = (state = initialState, action) => {\n    var index = _.findIndex(state, (task) => {\n        return task.id === action.id;\n    })\n\n    switch(action.type){\n        case types.LIST_ALL:\n            return state;\n        case types.ADD_TASK:\n            var newTask = {\n                id: generateID(),\n                name: action.task.name,\n                status: action.task.status === 'true' ? true : false\n            }\n            state.push(newTask);\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n        case types.UPDATE_STATUS_TASK:\n            if(index !== -1){\n                state[index] = {\n                    ...state[index],\n                    status: !state[index].status\n                }\n                localStorage.setItem('tasks', JSON.stringify(state));\n            }\n            return [...state];\n        case types.DELETE_ITEM:\n        \tif(index !== -1){\n        \t\tstate.splice(index, 1);\n\n        \t\tlocalStorage.setItem('tasks', JSON.stringify(state));\n        \t}\n            return [...state];\n        default:\n            return state;\n    }\n}\n\nexport default myReducer;"]},"metadata":{},"sourceType":"module"}