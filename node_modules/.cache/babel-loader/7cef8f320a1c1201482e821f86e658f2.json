{"ast":null,"code":"import * as types from '../constants/ActionTypes';\nimport _ from 'lodash';\n\nvar s4 = () => {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\nvar generateID = () => {\n  return s4() + '-' + s4() + '-' + s4() + '-' + s4();\n};\n\nvar data = JSON.parse(localStorage.getItem('tasks'));\nvar initialState = data ? data : [];\n\nvar myReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.ADD_TASK:\n      var newTask = {\n        id: generateID(),\n        name: action.task.name,\n        status: action.task.status === 'true' ? true : false\n      };\n      state.push(newTask);\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    case types.UPDATE_STATUS_TASK:\n      var index = _.findIndex(tasks, task => {\n        return task.id === id;\n      });\n\n      if (index !== -1) {\n        tasks[index].status = !tasks[index].status;\n        this.setState({\n          tasks: tasks\n        });\n        localStorage.setItem('tasks', JSON.stringify(tasks));\n      }\n\n      return [...state];\n\n    default:\n      return state;\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/Users/haquangtrong/Desktop/reacjs-manager-work/src/reducers/tasks.js"],"names":["types","_","s4","Math","floor","random","toString","substring","generateID","data","JSON","parse","localStorage","getItem","initialState","myReducer","state","action","type","LIST_ALL","ADD_TASK","newTask","id","name","task","status","push","setItem","stringify","UPDATE_STATUS_TASK","index","findIndex","tasks","setState"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB;AACA,OAAOC,CAAP,MAAc,QAAd;;AAEA,IAAIC,EAAE,GAAG,MAAM;AACX,SAAOC,IAAI,CAACC,KAAL,CAAW,CAAC,IAAED,IAAI,CAACE,MAAL,EAAH,IAAoB,OAA/B,EAAwCC,QAAxC,CAAiD,EAAjD,EAAqDC,SAArD,CAA+D,CAA/D,CAAP;AACH,CAFD;;AAGA,IAAIC,UAAU,GAAG,MAAM;AACnB,SAAON,EAAE,KAAK,GAAP,GAAaA,EAAE,EAAf,GAAoB,GAApB,GAA0BA,EAAE,EAA5B,GAAiC,GAAjC,GAAuCA,EAAE,EAAhD;AACH,CAFD;;AAIA,IAAIO,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAX;AACA,IAAIC,YAAY,GAAGL,IAAI,GAAGA,IAAH,GAAU,EAAjC;;AAEA,IAAIM,SAAS,GAAG,CAACC,KAAK,GAACF,YAAP,EAAqBG,MAArB,KAAgC;AAC5C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKlB,KAAK,CAACmB,QAAX;AACI,aAAOH,KAAP;;AACJ,SAAKhB,KAAK,CAACoB,QAAX;AACI,UAAIC,OAAO,GAAG;AACVC,QAAAA,EAAE,EAAEd,UAAU,EADJ;AAEVe,QAAAA,IAAI,EAAEN,MAAM,CAACO,IAAP,CAAYD,IAFR;AAGVE,QAAAA,MAAM,EAAER,MAAM,CAACO,IAAP,CAAYC,MAAZ,KAAuB,MAAvB,GAAgC,IAAhC,GAAuC;AAHrC,OAAd;AAKAT,MAAAA,KAAK,CAACU,IAAN,CAAWL,OAAX;AACAT,MAAAA,YAAY,CAACe,OAAb,CAAqB,OAArB,EAA8BjB,IAAI,CAACkB,SAAL,CAAeZ,KAAf,CAA9B;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACJ,SAAKhB,KAAK,CAAC6B,kBAAX;AACI,UAAIC,KAAK,GAAG7B,CAAC,CAAC8B,SAAF,CAAYC,KAAZ,EAAoBR,IAAD,IAAU;AACrC,eAAOA,IAAI,CAACF,EAAL,KAAYA,EAAnB;AACH,OAFW,CAAZ;;AAGA,UAAGQ,KAAK,KAAK,CAAC,CAAd,EAAgB;AACZE,QAAAA,KAAK,CAACF,KAAD,CAAL,CAAaL,MAAb,GAAsB,CAACO,KAAK,CAACF,KAAD,CAAL,CAAaL,MAApC;AAEA,aAAKQ,QAAL,CAAc;AACVD,UAAAA,KAAK,EAAEA;AADG,SAAd;AAGApB,QAAAA,YAAY,CAACe,OAAb,CAAqB,OAArB,EAA8BjB,IAAI,CAACkB,SAAL,CAAeI,KAAf,CAA9B;AACH;;AACD,aAAO,CAAC,GAAGhB,KAAJ,CAAP;;AACJ;AACI,aAAOA,KAAP;AA1BR;AA4BH,CA7BD;;AA+BA,eAAeD,SAAf","sourcesContent":["import * as types from '../constants/ActionTypes';\nimport _ from 'lodash';\n\nvar s4 = () => {\n    return Math.floor((1+Math.random()) * 0x10000).toString(16).substring(1);\n}\nvar generateID = () => {\n    return s4() + '-' + s4() + '-' + s4() + '-' + s4(); \n}\n\nvar data = JSON.parse(localStorage.getItem('tasks'));\nvar initialState = data ? data : [];\n\nvar myReducer = (state=initialState, action) => {\n    switch(action.type){\n        case types.LIST_ALL:\n            return state;\n        case types.ADD_TASK:\n            var newTask = {\n                id: generateID(),\n                name: action.task.name,\n                status: action.task.status === 'true' ? true : false\n            }\n            state.push(newTask);\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n        case types.UPDATE_STATUS_TASK:\n            var index = _.findIndex(tasks, (task) => {\n                return task.id === id;\n            })\n            if(index !== -1){\n                tasks[index].status = !tasks[index].status;\n\n                this.setState({\n                    tasks: tasks\n                });\n                localStorage.setItem('tasks', JSON.stringify(tasks));\n            }\n            return [...state];\n        default:\n            return state;\n    }\n}\n\nexport default myReducer;"]},"metadata":{},"sourceType":"module"}